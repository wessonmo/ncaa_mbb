    (
    select
        g.season,
        g.game_date,
		coalesce(trn.tourn,0) as tourn,
        g.season || '_' || g.school_id as off_id,
        g.season || '_' || g.opp_id as def_id,
        s_div.division as off_div,
        o_div.division as def_div,
        case
            when g.site is null and g.location = 'Home' then 0
            else dist.school_dist
        end as off_dist,
        case
            when g.site is null and g.location = 'Away' then 0
            else dist.opp_dist
        end as def_dist,
        g.school_score as pts,
        g.location as loc,
        coalesce(g.ot,0) as ot,
        case
            when g.location = 'Home' and s_info.capacity != 0 then g.attend/s_info.capacity
            when g.location = 'Away' and o_info.capacity != 0 then g.attend/o_info.capacity
            else null
        end as perc_capacity
    from
        mbb.games as g
        left join mbb.school_divs as s_div
            on
                g.season = s_div.season
                and g.school_id = s_div.school_id
        left join mbb.school_divs as o_div
            on
                g.season = o_div.season
                and g.opp_id = o_div.school_id
        left join mbb.school_info as s_info
            on
                g.season = s_info.season
                and g.school_id = s_info.school_id
        left join mbb.school_info as o_info
            on
                g.season = o_info.season
                and g.opp_id = o_info.school_id
        left join mbb.school_dist as dist
            on
                g.game_date = dist.game_date
                and g.school_id = dist.school_id
                and g.opp_id = dist.opp_id
		left join mbb.tourn_games as trn
			on
				g.game_date = trn.game_date
				and g.school_id = trn.school_id
				and g.opp_id = trn.opp_id
    where
        g.school_id < g.opp_id
	--limit 100
    )
union
    (
    select
        g.season,
        g.game_date,
		coalesce(trn.tourn,0) as tourn,
		g.season || '_' || g.opp_id as off_id,
        g.season || '_' || g.school_id as def_id,
		o_div.division as off_div,
        s_div.division as def_div,
		case
            when g.site is null and g.location = 'Away' then 0
            else dist.opp_dist
        end as off_dist,
        case
            when g.site is null and g.location = 'Home' then 0
            else dist.school_dist
        end as def_dist,
        g.opp_score as pts,
		case
			when g.location = 'Home' then 'Away'
			when g.location = 'Away' then 'Home'
			else 'Neutral'
		end as loc,
        coalesce(g.ot,0) as ot,
        case
            when g.location = 'Home' and s_info.capacity != 0 then g.attend/s_info.capacity
            when g.location = 'Away' and o_info.capacity != 0 then g.attend/o_info.capacity
            else null
        end as perc_capacity
    from
        mbb.games as g
        left join mbb.school_divs as s_div
            on
                g.season = s_div.season
                and g.school_id = s_div.school_id
        left join mbb.school_divs as o_div
            on
                g.season = o_div.season
                and g.opp_id = o_div.school_id
        left join mbb.school_info as s_info
            on
                g.season = s_info.season
                and g.school_id = s_info.school_id
        left join mbb.school_info as o_info
            on
                g.season = o_info.season
                and g.opp_id = o_info.school_id
        left join mbb.school_dist as dist
            on
                g.game_date = dist.game_date
                and g.school_id = dist.school_id
                and g.opp_id = dist.opp_id
		left join mbb.tourn_games as trn
			on
				g.game_date = trn.game_date
				and g.school_id = trn.school_id
				and g.opp_id = trn.opp_id
    where
        g.school_id < g.opp_id
	--limit 100
    )
;